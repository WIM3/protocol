/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ExchangeWrapperInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,address,(uint256))": FunctionFragment;
    "balancerPool()": FunctionFragment;
    "candidate()": FunctionFragment;
    "compoundCUsdt()": FunctionFragment;
    "getInputPrice(address,address,(uint256))": FunctionFragment;
    "getOutputPrice(address,address,(uint256))": FunctionFragment;
    "getSpotPrice(address,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBalancerPool(address)": FunctionFragment;
    "setCompoundCUsdt(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "swapInput(address,address,(uint256),(uint256),(uint256))": FunctionFragment;
    "swapOutput(address,address,(uint256),(uint256),(uint256))": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "balancerPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "compoundCUsdt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInputPrice",
    values: [string, string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputPrice",
    values: [string, string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBalancerPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompoundCUsdt",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapInput",
    values: [
      string,
      string,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOutput",
    values: [
      string,
      string,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balancerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compoundCUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBalancerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompoundCUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapInput", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapOutput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "BalancerSwap(uint256,uint256)": EventFragment;
    "CompoundMint(uint256,uint256)": EventFragment;
    "CompoundRedeem(uint256,uint256)": EventFragment;
    "ExchangeSwap(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalancerSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompoundMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompoundRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type BalancerSwapEvent = TypedEvent<
  [BigNumber, BigNumber] & { inAmount: BigNumber; out: BigNumber }
>;

export type CompoundMintEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    underlyingAmount: BigNumber;
    cTokenAmount: BigNumber;
  }
>;

export type CompoundRedeemEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    underlyingAmount: BigNumber;
    cTokenAmount: BigNumber;
  }
>;

export type ExchangeSwapEvent = TypedEvent<
  [BigNumber, BigNumber] & { perpTokenAmount: BigNumber; usdtAmount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class ExchangeWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ExchangeWrapperInterface;

  functions: {
    approve(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balancerPool(overrides?: CallOverrides): Promise<[string]>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    compoundCUsdt(overrides?: CallOverrides): Promise<[string]>;

    getInputPrice(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOutputPrice(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getSpotPrice(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    initialize(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBalancerPool(
      _balancerPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCompoundCUsdt(
      _compoundCUsdt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapInput(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapOutput(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    _token: string,
    _to: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balancerPool(overrides?: CallOverrides): Promise<string>;

  candidate(overrides?: CallOverrides): Promise<string>;

  compoundCUsdt(overrides?: CallOverrides): Promise<string>;

  getInputPrice(
    _inputToken: string,
    _outputToken: string,
    _inputTokenSold: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOutputPrice(
    _inputToken: string,
    _outputToken: string,
    _outputTokenBought: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getSpotPrice(
    _inputToken: string,
    _outputToken: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  initialize(
    _balancerPool: string,
    _compoundCUsdt: string,
    _perpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBalancerPool(
    _balancerPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCompoundCUsdt(
    _compoundCUsdt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapInput(
    _inputToken: string,
    _outputToken: string,
    _inputTokenSold: { d: BigNumberish },
    _minOutputTokenBought: { d: BigNumberish },
    _maxPrice: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapOutput(
    _inputToken: string,
    _outputToken: string,
    _outputTokenBought: { d: BigNumberish },
    _maxInputTokeSold: { d: BigNumberish },
    _maxPrice: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    balancerPool(overrides?: CallOverrides): Promise<string>;

    candidate(overrides?: CallOverrides): Promise<string>;

    compoundCUsdt(overrides?: CallOverrides): Promise<string>;

    getInputPrice(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOutputPrice(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getSpotPrice(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    initialize(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBalancerPool(
      _balancerPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCompoundCUsdt(
      _compoundCUsdt: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    swapInput(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    swapOutput(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    updateOwner(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BalancerSwap(uint256,uint256)"(
      inAmount?: null,
      out?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { inAmount: BigNumber; out: BigNumber }
    >;

    BalancerSwap(
      inAmount?: null,
      out?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { inAmount: BigNumber; out: BigNumber }
    >;

    "CompoundMint(uint256,uint256)"(
      underlyingAmount?: null,
      cTokenAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { underlyingAmount: BigNumber; cTokenAmount: BigNumber }
    >;

    CompoundMint(
      underlyingAmount?: null,
      cTokenAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { underlyingAmount: BigNumber; cTokenAmount: BigNumber }
    >;

    "CompoundRedeem(uint256,uint256)"(
      underlyingAmount?: null,
      cTokenAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { underlyingAmount: BigNumber; cTokenAmount: BigNumber }
    >;

    CompoundRedeem(
      underlyingAmount?: null,
      cTokenAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { underlyingAmount: BigNumber; cTokenAmount: BigNumber }
    >;

    "ExchangeSwap(uint256,uint256)"(
      perpTokenAmount?: null,
      usdtAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { perpTokenAmount: BigNumber; usdtAmount: BigNumber }
    >;

    ExchangeSwap(
      perpTokenAmount?: null,
      usdtAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { perpTokenAmount: BigNumber; usdtAmount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    approve(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balancerPool(overrides?: CallOverrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    compoundCUsdt(overrides?: CallOverrides): Promise<BigNumber>;

    getInputPrice(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputPrice(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPrice(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBalancerPool(
      _balancerPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCompoundCUsdt(
      _compoundCUsdt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapInput(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapOutput(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balancerPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compoundCUsdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInputPrice(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputPrice(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPrice(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBalancerPool(
      _balancerPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCompoundCUsdt(
      _compoundCUsdt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapInput(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapOutput(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
