/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRrpBeaconServerInterface extends ethers.utils.Interface {
  functions: {
    "beaconIdToReaderToSetterToIndefiniteWhitelistStatus(bytes32,address,address)": FunctionFragment;
    "beaconIdToReaderToWhitelistStatus(bytes32,address)": FunctionFragment;
    "deriveBeaconId(bytes32,bytes)": FunctionFragment;
    "extendWhitelistExpiration(bytes32,address,uint64)": FunctionFragment;
    "fulfill(bytes32,bytes)": FunctionFragment;
    "readBeacon(bytes32)": FunctionFragment;
    "readerCanReadBeacon(bytes32,address)": FunctionFragment;
    "requestBeaconUpdate(bytes32,address,address,bytes)": FunctionFragment;
    "revokeIndefiniteWhitelistStatus(bytes32,address,address)": FunctionFragment;
    "setIndefiniteWhitelistStatus(bytes32,address,bool)": FunctionFragment;
    "setUpdatePermissionStatus(address,bool)": FunctionFragment;
    "setWhitelistExpiration(bytes32,address,uint64)": FunctionFragment;
    "sponsorToUpdateRequesterToPermissionStatus(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "beaconIdToReaderToSetterToIndefiniteWhitelistStatus",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "beaconIdToReaderToWhitelistStatus",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveBeaconId",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "extendWhitelistExpiration",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "readBeacon",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "readerCanReadBeacon",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestBeaconUpdate",
    values: [BytesLike, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeIndefiniteWhitelistStatus",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIndefiniteWhitelistStatus",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdatePermissionStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistExpiration",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorToUpdateRequesterToPermissionStatus",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "beaconIdToReaderToSetterToIndefiniteWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beaconIdToReaderToWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deriveBeaconId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendWhitelistExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readBeacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readerCanReadBeacon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBeaconUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeIndefiniteWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIndefiniteWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdatePermissionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorToUpdateRequesterToPermissionStatus",
    data: BytesLike
  ): Result;

  events: {
    "ExtendedWhitelistExpiration(bytes32,address,address,uint256)": EventFragment;
    "RequestedBeaconUpdate(bytes32,address,address,bytes32,bytes32,address,bytes)": EventFragment;
    "RevokedIndefiniteWhitelistStatus(bytes32,address,address,address,uint192)": EventFragment;
    "SetIndefiniteWhitelistStatus(bytes32,address,address,bool,uint192)": EventFragment;
    "SetUpdatePermissionStatus(address,address,bool)": EventFragment;
    "SetWhitelistExpiration(bytes32,address,address,uint256)": EventFragment;
    "UpdatedBeacon(bytes32,bytes32,int224,uint32)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ExtendedWhitelistExpiration"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedBeaconUpdate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RevokedIndefiniteWhitelistStatus"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetIndefiniteWhitelistStatus"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUpdatePermissionStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelistExpiration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedBeacon"): EventFragment;
}

export type ExtendedWhitelistExpirationEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    beaconId: string;
    reader: string;
    sender: string;
    expiration: BigNumber;
  }
>;

export type RequestedBeaconUpdateEvent = TypedEvent<
  [string, string, string, string, string, string, string] & {
    beaconId: string;
    sponsor: string;
    requester: string;
    requestId: string;
    templateId: string;
    sponsorWallet: string;
    parameters: string;
  }
>;

export type RevokedIndefiniteWhitelistStatusEvent = TypedEvent<
  [string, string, string, string, BigNumber] & {
    beaconId: string;
    reader: string;
    setter: string;
    sender: string;
    indefiniteWhitelistCount: BigNumber;
  }
>;

export type SetIndefiniteWhitelistStatusEvent = TypedEvent<
  [string, string, string, boolean, BigNumber] & {
    beaconId: string;
    reader: string;
    sender: string;
    status: boolean;
    indefiniteWhitelistCount: BigNumber;
  }
>;

export type SetUpdatePermissionStatusEvent = TypedEvent<
  [string, string, boolean] & {
    sponsor: string;
    updateRequester: string;
    status: boolean;
  }
>;

export type SetWhitelistExpirationEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    beaconId: string;
    reader: string;
    sender: string;
    expiration: BigNumber;
  }
>;

export type UpdatedBeaconEvent = TypedEvent<
  [string, string, BigNumber, number] & {
    beaconId: string;
    requestId: string;
    value: BigNumber;
    timestamp: number;
  }
>;

export class IRrpBeaconServer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRrpBeaconServerInterface;

  functions: {
    beaconIdToReaderToSetterToIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      setter: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { indefiniteWhitelistStatus: boolean }>;

    beaconIdToReaderToWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expirationTimestamp: BigNumber;
        indefiniteWhitelistCount: BigNumber;
      }
    >;

    deriveBeaconId(
      templateId: BytesLike,
      parameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { beaconId: string }>;

    extendWhitelistExpiration(
      beaconId: BytesLike,
      reader: string,
      expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfill(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    readBeacon(
      beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { value: BigNumber; timestamp: number }>;

    readerCanReadBeacon(
      beaconId: BytesLike,
      reader: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requestBeaconUpdate(
      beaconId: BytesLike,
      requester: string,
      designatedWallet: string,
      parameters: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      setter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpdatePermissionStatus(
      updateRequester: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistExpiration(
      beaconId: BytesLike,
      reader: string,
      expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sponsorToUpdateRequesterToPermissionStatus(
      sponsor: string,
      updateRequester: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { permissionStatus: boolean }>;
  };

  beaconIdToReaderToSetterToIndefiniteWhitelistStatus(
    beaconId: BytesLike,
    reader: string,
    setter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  beaconIdToReaderToWhitelistStatus(
    beaconId: BytesLike,
    reader: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      expirationTimestamp: BigNumber;
      indefiniteWhitelistCount: BigNumber;
    }
  >;

  deriveBeaconId(
    templateId: BytesLike,
    parameters: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  extendWhitelistExpiration(
    beaconId: BytesLike,
    reader: string,
    expirationTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfill(
    requestId: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  readBeacon(
    beaconId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { value: BigNumber; timestamp: number }>;

  readerCanReadBeacon(
    beaconId: BytesLike,
    reader: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestBeaconUpdate(
    beaconId: BytesLike,
    requester: string,
    designatedWallet: string,
    parameters: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeIndefiniteWhitelistStatus(
    beaconId: BytesLike,
    reader: string,
    setter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIndefiniteWhitelistStatus(
    beaconId: BytesLike,
    reader: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpdatePermissionStatus(
    updateRequester: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistExpiration(
    beaconId: BytesLike,
    reader: string,
    expirationTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sponsorToUpdateRequesterToPermissionStatus(
    sponsor: string,
    updateRequester: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    beaconIdToReaderToSetterToIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      setter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    beaconIdToReaderToWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expirationTimestamp: BigNumber;
        indefiniteWhitelistCount: BigNumber;
      }
    >;

    deriveBeaconId(
      templateId: BytesLike,
      parameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    extendWhitelistExpiration(
      beaconId: BytesLike,
      reader: string,
      expirationTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfill(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    readBeacon(
      beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { value: BigNumber; timestamp: number }>;

    readerCanReadBeacon(
      beaconId: BytesLike,
      reader: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestBeaconUpdate(
      beaconId: BytesLike,
      requester: string,
      designatedWallet: string,
      parameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      setter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdatePermissionStatus(
      updateRequester: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistExpiration(
      beaconId: BytesLike,
      reader: string,
      expirationTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsorToUpdateRequesterToPermissionStatus(
      sponsor: string,
      updateRequester: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ExtendedWhitelistExpiration(bytes32,address,address,uint256)"(
      beaconId?: BytesLike | null,
      reader?: string | null,
      sender?: string | null,
      expiration?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        beaconId: string;
        reader: string;
        sender: string;
        expiration: BigNumber;
      }
    >;

    ExtendedWhitelistExpiration(
      beaconId?: BytesLike | null,
      reader?: string | null,
      sender?: string | null,
      expiration?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        beaconId: string;
        reader: string;
        sender: string;
        expiration: BigNumber;
      }
    >;

    "RequestedBeaconUpdate(bytes32,address,address,bytes32,bytes32,address,bytes)"(
      beaconId?: BytesLike | null,
      sponsor?: string | null,
      requester?: string | null,
      requestId?: null,
      templateId?: null,
      sponsorWallet?: null,
      parameters?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string, string],
      {
        beaconId: string;
        sponsor: string;
        requester: string;
        requestId: string;
        templateId: string;
        sponsorWallet: string;
        parameters: string;
      }
    >;

    RequestedBeaconUpdate(
      beaconId?: BytesLike | null,
      sponsor?: string | null,
      requester?: string | null,
      requestId?: null,
      templateId?: null,
      sponsorWallet?: null,
      parameters?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string, string],
      {
        beaconId: string;
        sponsor: string;
        requester: string;
        requestId: string;
        templateId: string;
        sponsorWallet: string;
        parameters: string;
      }
    >;

    "RevokedIndefiniteWhitelistStatus(bytes32,address,address,address,uint192)"(
      beaconId?: BytesLike | null,
      reader?: string | null,
      setter?: string | null,
      sender?: null,
      indefiniteWhitelistCount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        beaconId: string;
        reader: string;
        setter: string;
        sender: string;
        indefiniteWhitelistCount: BigNumber;
      }
    >;

    RevokedIndefiniteWhitelistStatus(
      beaconId?: BytesLike | null,
      reader?: string | null,
      setter?: string | null,
      sender?: null,
      indefiniteWhitelistCount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        beaconId: string;
        reader: string;
        setter: string;
        sender: string;
        indefiniteWhitelistCount: BigNumber;
      }
    >;

    "SetIndefiniteWhitelistStatus(bytes32,address,address,bool,uint192)"(
      beaconId?: BytesLike | null,
      reader?: string | null,
      sender?: string | null,
      status?: null,
      indefiniteWhitelistCount?: null
    ): TypedEventFilter<
      [string, string, string, boolean, BigNumber],
      {
        beaconId: string;
        reader: string;
        sender: string;
        status: boolean;
        indefiniteWhitelistCount: BigNumber;
      }
    >;

    SetIndefiniteWhitelistStatus(
      beaconId?: BytesLike | null,
      reader?: string | null,
      sender?: string | null,
      status?: null,
      indefiniteWhitelistCount?: null
    ): TypedEventFilter<
      [string, string, string, boolean, BigNumber],
      {
        beaconId: string;
        reader: string;
        sender: string;
        status: boolean;
        indefiniteWhitelistCount: BigNumber;
      }
    >;

    "SetUpdatePermissionStatus(address,address,bool)"(
      sponsor?: string | null,
      updateRequester?: string | null,
      status?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { sponsor: string; updateRequester: string; status: boolean }
    >;

    SetUpdatePermissionStatus(
      sponsor?: string | null,
      updateRequester?: string | null,
      status?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { sponsor: string; updateRequester: string; status: boolean }
    >;

    "SetWhitelistExpiration(bytes32,address,address,uint256)"(
      beaconId?: BytesLike | null,
      reader?: string | null,
      sender?: string | null,
      expiration?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        beaconId: string;
        reader: string;
        sender: string;
        expiration: BigNumber;
      }
    >;

    SetWhitelistExpiration(
      beaconId?: BytesLike | null,
      reader?: string | null,
      sender?: string | null,
      expiration?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        beaconId: string;
        reader: string;
        sender: string;
        expiration: BigNumber;
      }
    >;

    "UpdatedBeacon(bytes32,bytes32,int224,uint32)"(
      beaconId?: BytesLike | null,
      requestId?: null,
      value?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, number],
      {
        beaconId: string;
        requestId: string;
        value: BigNumber;
        timestamp: number;
      }
    >;

    UpdatedBeacon(
      beaconId?: BytesLike | null,
      requestId?: null,
      value?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, number],
      {
        beaconId: string;
        requestId: string;
        value: BigNumber;
        timestamp: number;
      }
    >;
  };

  estimateGas: {
    beaconIdToReaderToSetterToIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      setter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beaconIdToReaderToWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deriveBeaconId(
      templateId: BytesLike,
      parameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extendWhitelistExpiration(
      beaconId: BytesLike,
      reader: string,
      expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfill(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    readBeacon(
      beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readerCanReadBeacon(
      beaconId: BytesLike,
      reader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestBeaconUpdate(
      beaconId: BytesLike,
      requester: string,
      designatedWallet: string,
      parameters: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      setter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpdatePermissionStatus(
      updateRequester: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistExpiration(
      beaconId: BytesLike,
      reader: string,
      expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sponsorToUpdateRequesterToPermissionStatus(
      sponsor: string,
      updateRequester: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beaconIdToReaderToSetterToIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      setter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beaconIdToReaderToWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deriveBeaconId(
      templateId: BytesLike,
      parameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extendWhitelistExpiration(
      beaconId: BytesLike,
      reader: string,
      expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfill(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    readBeacon(
      beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readerCanReadBeacon(
      beaconId: BytesLike,
      reader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestBeaconUpdate(
      beaconId: BytesLike,
      requester: string,
      designatedWallet: string,
      parameters: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      setter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIndefiniteWhitelistStatus(
      beaconId: BytesLike,
      reader: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpdatePermissionStatus(
      updateRequester: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistExpiration(
      beaconId: BytesLike,
      reader: string,
      expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sponsorToUpdateRequesterToPermissionStatus(
      sponsor: string,
      updateRequester: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
