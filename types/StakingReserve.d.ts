/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingReserveInterface extends ethers.utils.Interface {
  functions: {
    "candidate()": FunctionFragment;
    "claimFeesAndVestedReward()": FunctionFragment;
    "depositAndStake((uint256))": FunctionFragment;
    "epochRewardHistory(uint256)": FunctionFragment;
    "feeMap(address)": FunctionFragment;
    "feeNotifier()": FunctionFragment;
    "feeTokens(uint256)": FunctionFragment;
    "getEpochRewardHistoryLength()": FunctionFragment;
    "getFeeEpochCursor(address)": FunctionFragment;
    "getFeeOfEpoch(uint256,address)": FunctionFragment;
    "getFeeRevenue(address)": FunctionFragment;
    "getLockedBalance(address,uint256)": FunctionFragment;
    "getRewardEpochCursor(address)": FunctionFragment;
    "getTotalBalance()": FunctionFragment;
    "getTotalEffectiveStake(uint256)": FunctionFragment;
    "getUnlockedBalance(address)": FunctionFragment;
    "getUnstakableBalance(address)": FunctionFragment;
    "getVestedReward(address)": FunctionFragment;
    "initialize(address,address,address,uint256)": FunctionFragment;
    "isExistedFeeToken(address)": FunctionFragment;
    "nextEpochIndex()": FunctionFragment;
    "notifyRewardAmount((uint256))": FunctionFragment;
    "notifyTokenAmount(address,(uint256))": FunctionFragment;
    "owner()": FunctionFragment;
    "perpToken()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsDistribution()": FunctionFragment;
    "setFeeNotifier(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setRewardsDistribution(address)": FunctionFragment;
    "setVestingPeriod(uint256)": FunctionFragment;
    "stake((uint256))": FunctionFragment;
    "stakeBalanceMap(address)": FunctionFragment;
    "stakers(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "unstake((uint256))": FunctionFragment;
    "updateOwner()": FunctionFragment;
    "vestingPeriod()": FunctionFragment;
    "withdraw((uint256))": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimFeesAndVestedReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndStake",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "epochRewardHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeMap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeNotifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochRewardHistoryLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeEpochCursor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeOfEpoch",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRevenue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochCursor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalEffectiveStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnstakableBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestedReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExistedFeeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nextEpochIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyTokenAmount",
    values: [string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "perpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeNotifier",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRewardsDistribution",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeBalanceMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [{ d: BigNumberish }]
  ): string;

  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimFeesAndVestedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochRewardHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeNotifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEpochRewardHistoryLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeEpochCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeOfEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalEffectiveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnstakableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExistedFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEpochIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "perpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeNotifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeBalanceMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "FeeInEpoch(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeInEpoch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardWithdrawn"): EventFragment;
}

export type FeeInEpochEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    token: string;
    fee: BigNumber;
    epoch: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RewardWithdrawnEvent = TypedEvent<
  [string, BigNumber] & { staker: string; amount: BigNumber }
>;

export class StakingReserve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingReserveInterface;

  functions: {
    candidate(overrides?: CallOverrides): Promise<[string]>;

    claimFeesAndVestedReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndStake(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochRewardHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & {
        perpReward: [BigNumber] & { d: BigNumber };
      }
    >;

    feeMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    feeNotifier(overrides?: CallOverrides): Promise<[string]>;

    feeTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getEpochRewardHistoryLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeEpochCursor(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeOfEpoch(
      _epoch: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getFeeRevenue(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, [BigNumber] & { d: BigNumber }] & {
          token: string;
          balance: [BigNumber] & { d: BigNumber };
        })[]
      ] & {
        feeBalance: ([string, [BigNumber] & { d: BigNumber }] & {
          token: string;
          balance: [BigNumber] & { d: BigNumber };
        })[];
      }
    >;

    getLockedBalance(
      _staker: string,
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          exist: boolean;
          locked: [BigNumber] & { d: BigNumber };
          timeWeightedLocked: [BigNumber] & { d: BigNumber };
        }
      ]
    >;

    getRewardEpochCursor(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalBalance(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getTotalEffectiveStake(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getUnlockedBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getUnstakableBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getVestedReward(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & {
        reward: [BigNumber] & { d: BigNumber };
      }
    >;

    initialize(
      _perpToken: string,
      _supplySchedule: string,
      _feeNotifier: string,
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExistedFeeToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nextEpochIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    notifyRewardAmount(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    notifyTokenAmount(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    perpToken(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsDistribution(overrides?: CallOverrides): Promise<[string]>;

    setFeeNotifier(
      _notifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsDistribution(
      _rewardsDistribution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeBalanceMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, [BigNumber] & { d: BigNumber }, BigNumber, BigNumber] & {
        exist: boolean;
        totalBalance: [BigNumber] & { d: BigNumber };
        rewardEpochCursor: BigNumber;
        feeEpochCursor: BigNumber;
      }
    >;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    unstake(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  candidate(overrides?: CallOverrides): Promise<string>;

  claimFeesAndVestedReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndStake(
    _amount: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochRewardHistory(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  feeMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  feeNotifier(overrides?: CallOverrides): Promise<string>;

  feeTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getEpochRewardHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeEpochCursor(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeOfEpoch(
    _epoch: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getFeeRevenue(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, [BigNumber] & { d: BigNumber }] & {
      token: string;
      balance: [BigNumber] & { d: BigNumber };
    })[]
  >;

  getLockedBalance(
    _staker: string,
    _epochIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber }
    ] & {
      exist: boolean;
      locked: [BigNumber] & { d: BigNumber };
      timeWeightedLocked: [BigNumber] & { d: BigNumber };
    }
  >;

  getRewardEpochCursor(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalBalance(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getTotalEffectiveStake(
    _epochIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getUnlockedBalance(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getUnstakableBalance(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getVestedReward(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  initialize(
    _perpToken: string,
    _supplySchedule: string,
    _feeNotifier: string,
    _vestingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExistedFeeToken(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nextEpochIndex(overrides?: CallOverrides): Promise<BigNumber>;

  notifyRewardAmount(
    _amount: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  notifyTokenAmount(
    _token: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  perpToken(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsDistribution(overrides?: CallOverrides): Promise<string>;

  setFeeNotifier(
    _notifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsDistribution(
    _rewardsDistribution: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingPeriod(
    _vestingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeBalanceMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, [BigNumber] & { d: BigNumber }, BigNumber, BigNumber] & {
      exist: boolean;
      totalBalance: [BigNumber] & { d: BigNumber };
      rewardEpochCursor: BigNumber;
      feeEpochCursor: BigNumber;
    }
  >;

  stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  unstake(
    _amount: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _amount: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    candidate(overrides?: CallOverrides): Promise<string>;

    claimFeesAndVestedReward(overrides?: CallOverrides): Promise<void>;

    depositAndStake(
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    epochRewardHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    feeMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeNotifier(overrides?: CallOverrides): Promise<string>;

    feeTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getEpochRewardHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeEpochCursor(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeOfEpoch(
      _epoch: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getFeeRevenue(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, [BigNumber] & { d: BigNumber }] & {
        token: string;
        balance: [BigNumber] & { d: BigNumber };
      })[]
    >;

    getLockedBalance(
      _staker: string,
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        exist: boolean;
        locked: [BigNumber] & { d: BigNumber };
        timeWeightedLocked: [BigNumber] & { d: BigNumber };
      }
    >;

    getRewardEpochCursor(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getTotalEffectiveStake(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getUnlockedBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getUnstakableBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getVestedReward(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    initialize(
      _perpToken: string,
      _supplySchedule: string,
      _feeNotifier: string,
      _vestingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isExistedFeeToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nextEpochIndex(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    notifyTokenAmount(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    perpToken(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsDistribution(overrides?: CallOverrides): Promise<string>;

    setFeeNotifier(_notifier: string, overrides?: CallOverrides): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    setRewardsDistribution(
      _rewardsDistribution: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    stakeBalanceMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, [BigNumber] & { d: BigNumber }, BigNumber, BigNumber] & {
        exist: boolean;
        totalBalance: [BigNumber] & { d: BigNumber };
        rewardEpochCursor: BigNumber;
        feeEpochCursor: BigNumber;
      }
    >;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    unstake(
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    vestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeInEpoch(address,uint256,uint256)"(
      token?: null,
      fee?: null,
      epoch?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; fee: BigNumber; epoch: BigNumber }
    >;

    FeeInEpoch(
      token?: null,
      fee?: null,
      epoch?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; fee: BigNumber; epoch: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RewardWithdrawn(address,uint256)"(
      staker?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { staker: string; amount: BigNumber }
    >;

    RewardWithdrawn(
      staker?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { staker: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    claimFeesAndVestedReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndStake(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochRewardHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeNotifier(overrides?: CallOverrides): Promise<BigNumber>;

    feeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochRewardHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeEpochCursor(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeOfEpoch(
      _epoch: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeRevenue(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedBalance(
      _staker: string,
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardEpochCursor(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalEffectiveStake(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnlockedBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnstakableBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestedReward(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _perpToken: string,
      _supplySchedule: string,
      _feeNotifier: string,
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExistedFeeToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextEpochIndex(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    notifyTokenAmount(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    perpToken(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeNotifier(
      _notifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsDistribution(
      _rewardsDistribution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeBalanceMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimFeesAndVestedReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndStake(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochRewardHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeNotifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochRewardHistoryLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeEpochCursor(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeOfEpoch(
      _epoch: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeRevenue(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockedBalance(
      _staker: string,
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochCursor(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalEffectiveStake(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnlockedBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnstakableBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestedReward(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _perpToken: string,
      _supplySchedule: string,
      _feeNotifier: string,
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExistedFeeToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextEpochIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    notifyTokenAmount(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsDistribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeNotifier(
      _notifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsDistribution(
      _rewardsDistribution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingPeriod(
      _vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeBalanceMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
