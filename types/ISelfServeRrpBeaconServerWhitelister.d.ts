/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISelfServeRrpBeaconServerWhitelisterInterface
  extends ethers.utils.Interface {
  functions: {
    "beaconIdToExpirationTimestamp(bytes32)": FunctionFragment;
    "beaconIdToIndefiniteWhitelistStatus(bytes32)": FunctionFragment;
    "rrpBeaconServer()": FunctionFragment;
    "setBeaconIdToExpirationTimestamp(bytes32,uint64)": FunctionFragment;
    "setBeaconIdToIndefiniteWhitelistStatus(bytes32,bool)": FunctionFragment;
    "whitelistReader(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "beaconIdToExpirationTimestamp",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beaconIdToIndefiniteWhitelistStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rrpBeaconServer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBeaconIdToExpirationTimestamp",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeaconIdToIndefiniteWhitelistStatus",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistReader",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "beaconIdToExpirationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beaconIdToIndefiniteWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rrpBeaconServer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeaconIdToExpirationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeaconIdToIndefiniteWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistReader",
    data: BytesLike
  ): Result;

  events: {
    "SetBeaconIdToExpirationTimestamp(bytes32,uint64)": EventFragment;
    "SetBeaconIdToIndefiniteWhitelistStatus(bytes32,bool)": EventFragment;
    "WhitelistedReader(bytes32,address,uint64,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "SetBeaconIdToExpirationTimestamp"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetBeaconIdToIndefiniteWhitelistStatus"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedReader"): EventFragment;
}

export type SetBeaconIdToExpirationTimestampEvent = TypedEvent<
  [string, BigNumber] & { beaconId: string; expirationTimestamp: BigNumber }
>;

export type SetBeaconIdToIndefiniteWhitelistStatusEvent = TypedEvent<
  [string, boolean] & { beaconId: string; indefiniteWhitelistStatus: boolean }
>;

export type WhitelistedReaderEvent = TypedEvent<
  [string, string, BigNumber, boolean] & {
    beaconId: string;
    reader: string;
    expirationTimestamp: BigNumber;
    indefiniteWhitelistStatus: boolean;
  }
>;

export class ISelfServeRrpBeaconServerWhitelister extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISelfServeRrpBeaconServerWhitelisterInterface;

  functions: {
    beaconIdToExpirationTimestamp(
      _beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    beaconIdToIndefiniteWhitelistStatus(
      _beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rrpBeaconServer(overrides?: CallOverrides): Promise<[string]>;

    setBeaconIdToExpirationTimestamp(
      _beaconId: BytesLike,
      _expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBeaconIdToIndefiniteWhitelistStatus(
      _beaconId: BytesLike,
      _indefiniteWhitelistStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistReader(
      _beaconId: BytesLike,
      _reader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  beaconIdToExpirationTimestamp(
    _beaconId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beaconIdToIndefiniteWhitelistStatus(
    _beaconId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rrpBeaconServer(overrides?: CallOverrides): Promise<string>;

  setBeaconIdToExpirationTimestamp(
    _beaconId: BytesLike,
    _expirationTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBeaconIdToIndefiniteWhitelistStatus(
    _beaconId: BytesLike,
    _indefiniteWhitelistStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistReader(
    _beaconId: BytesLike,
    _reader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    beaconIdToExpirationTimestamp(
      _beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beaconIdToIndefiniteWhitelistStatus(
      _beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rrpBeaconServer(overrides?: CallOverrides): Promise<string>;

    setBeaconIdToExpirationTimestamp(
      _beaconId: BytesLike,
      _expirationTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBeaconIdToIndefiniteWhitelistStatus(
      _beaconId: BytesLike,
      _indefiniteWhitelistStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistReader(
      _beaconId: BytesLike,
      _reader: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetBeaconIdToExpirationTimestamp(bytes32,uint64)"(
      beaconId?: BytesLike | null,
      expirationTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beaconId: string; expirationTimestamp: BigNumber }
    >;

    SetBeaconIdToExpirationTimestamp(
      beaconId?: BytesLike | null,
      expirationTimestamp?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beaconId: string; expirationTimestamp: BigNumber }
    >;

    "SetBeaconIdToIndefiniteWhitelistStatus(bytes32,bool)"(
      beaconId?: BytesLike | null,
      indefiniteWhitelistStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { beaconId: string; indefiniteWhitelistStatus: boolean }
    >;

    SetBeaconIdToIndefiniteWhitelistStatus(
      beaconId?: BytesLike | null,
      indefiniteWhitelistStatus?: null
    ): TypedEventFilter<
      [string, boolean],
      { beaconId: string; indefiniteWhitelistStatus: boolean }
    >;

    "WhitelistedReader(bytes32,address,uint64,bool)"(
      beaconId?: BytesLike | null,
      reader?: string | null,
      expirationTimestamp?: null,
      indefiniteWhitelistStatus?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean],
      {
        beaconId: string;
        reader: string;
        expirationTimestamp: BigNumber;
        indefiniteWhitelistStatus: boolean;
      }
    >;

    WhitelistedReader(
      beaconId?: BytesLike | null,
      reader?: string | null,
      expirationTimestamp?: null,
      indefiniteWhitelistStatus?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean],
      {
        beaconId: string;
        reader: string;
        expirationTimestamp: BigNumber;
        indefiniteWhitelistStatus: boolean;
      }
    >;
  };

  estimateGas: {
    beaconIdToExpirationTimestamp(
      _beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beaconIdToIndefiniteWhitelistStatus(
      _beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rrpBeaconServer(overrides?: CallOverrides): Promise<BigNumber>;

    setBeaconIdToExpirationTimestamp(
      _beaconId: BytesLike,
      _expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBeaconIdToIndefiniteWhitelistStatus(
      _beaconId: BytesLike,
      _indefiniteWhitelistStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistReader(
      _beaconId: BytesLike,
      _reader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beaconIdToExpirationTimestamp(
      _beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beaconIdToIndefiniteWhitelistStatus(
      _beaconId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rrpBeaconServer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBeaconIdToExpirationTimestamp(
      _beaconId: BytesLike,
      _expirationTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBeaconIdToIndefiniteWhitelistStatus(
      _beaconId: BytesLike,
      _indefiniteWhitelistStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistReader(
      _beaconId: BytesLike,
      _reader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
