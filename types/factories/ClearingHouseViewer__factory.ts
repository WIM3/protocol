/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ClearingHouseViewer,
  ClearingHouseViewerInterface,
} from "../ClearingHouseViewer";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ClearingHouse",
        name: "_clearingHouse",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "clearingHouse",
    outputs: [
      {
        internalType: "contract ClearingHouse",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAmm",
        name: "_amm",
        type: "address",
      },
      {
        internalType: "address",
        name: "_trader",
        type: "address",
      },
    ],
    name: "getFreeCollateral",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "d",
            type: "int256",
          },
        ],
        internalType: "struct SignedDecimal.signedDecimal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAmm",
        name: "_amm",
        type: "address",
      },
      {
        internalType: "address",
        name: "_trader",
        type: "address",
      },
    ],
    name: "getMarginRatio",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "d",
            type: "int256",
          },
        ],
        internalType: "struct SignedDecimal.signedDecimal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_quoteToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_trader",
        type: "address",
      },
    ],
    name: "getPersonalBalanceWithFundingPayment",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "margin",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAmm",
        name: "_amm",
        type: "address",
      },
      {
        internalType: "address",
        name: "_trader",
        type: "address",
      },
    ],
    name: "getPersonalPositionWithFundingPayment",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "int256",
                name: "d",
                type: "int256",
              },
            ],
            internalType: "struct SignedDecimal.signedDecimal",
            name: "size",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "d",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.decimal",
            name: "margin",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "d",
                type: "uint256",
              },
            ],
            internalType: "struct Decimal.decimal",
            name: "openNotional",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "d",
                type: "int256",
              },
            ],
            internalType: "struct SignedDecimal.signedDecimal",
            name: "lastUpdatedCumulativePremiumFraction",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "liquidityHistoryIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
        ],
        internalType: "struct ClearingHouse.Position",
        name: "position",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAmm",
        name: "_amm",
        type: "address",
      },
      {
        internalType: "address",
        name: "_trader",
        type: "address",
      },
      {
        internalType: "enum ClearingHouse.PnlCalcOption",
        name: "_pnlCalcOption",
        type: "uint8",
      },
    ],
    name: "getUnrealizedPnl",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "d",
            type: "int256",
          },
        ],
        internalType: "struct SignedDecimal.signedDecimal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAmm",
        name: "_amm",
        type: "address",
      },
      {
        internalType: "address",
        name: "_trader",
        type: "address",
      },
    ],
    name: "isPositionNeedToBeMigrated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161163838038061163883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6115a7806100916000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637db3b72d1161005b5780637db3b72d146100e0578063a242023814610100578063bafe871c14610113578063ea0a45f9146101265761007d565b80630af968001461008257806316f6c558146100a057806333d3bd30146100c0575b600080fd5b61008a610139565b6040516100979190611263565b60405180910390f35b6100b36100ae3660046110c3565b610148565b604051610097919061148d565b6100d36100ce3660046110c3565b6102b7565b60405161009791906114d5565b6100f36100ee3660046110c3565b6105a8565b6040516100979190611258565b6100d361010e3660046110fb565b6106f9565b6100d3610121366004611164565b610796565b6100d36101343660046110c3565b61099d565b6000546001600160a01b031681565b610150610f92565b600054604051630b33dc1960e41b81526001600160a01b039091169063b33dc190906101829086908690600401611277565b60c06040518083038186803b15801561019a57600080fd5b505afa1580156101ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d29190611176565b90506101dc610fe0565b600054604051636891397b60e01b8152610282916102699185916001600160a01b031690636891397b90610214908a90600401611263565b60206040518083038186803b15801561022c57600080fd5b505afa158015610240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102649190611225565b610a2e565b6102768460200151610a90565b9063ffffffff610afd16565b9050600061028f82610b29565b12156102a25761029d610b2d565b6102ab565b6102ab81610b48565b60208301525092915050565b6102bf610fe0565b6102c7610f92565b6102d18484610148565b90506102db610fe0565b6102e3610fe0565b60008054604051638bedf3bb60e01b81526001600160a01b0390911691638bedf3bb91610317918a918a9190600401611291565b604080518083038186803b15801561032e57600080fd5b505afa158015610342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036691906111f1565b91509150610372610fe0565b61037a610fe0565b600054604051638bedf3bb60e01b81526001600160a01b0390911690638bedf3bb906103af908b908b90600190600401611291565b604080518083038186803b1580156103c657600080fd5b505afa1580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe91906111f1565b9150915061040a610fe0565b610412610fe0565b61041b83610b29565b61042486610b29565b13610430578486610433565b82845b9092509050610440610fe0565b602088015161045690849063ffffffff610b7616565b9050610460610fe0565b600061048161047c8b6020015185610beb90919063ffffffff16565b610b29565b1361048c5781610499565b6104998960200151610a90565b90506104a3610fe0565b60405180602001604052806000809054906101000a90046001600160a01b03166001600160a01b031663e57d56366040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fb57600080fd5b505afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105339190611240565b9052905061053f610fe0565b600061054e8c60000151610b29565b136105715761056c8261056087610a90565b9063ffffffff610c5616565b610582565b610582826105608d60400151610a90565b9050610594838263ffffffff610cd016565b9b5050505050505050505050505b92915050565b60006105b2610f92565b60005460405163023aedad60e11b81526001600160a01b0390911690630475db5a906105e49087908790600401611277565b60c06040518083038186803b1580156105fc57600080fd5b505afa158015610610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106349190611176565b90506106438160000151610b29565b6106515760009150506105a2565b60006106d56001866001600160a01b03166342b3198b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561069157600080fd5b505afa1580156106a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c99190611240565b9063ffffffff610cf316565b905080826080015114156106ee576000925050506105a2565b506001949350505050565b610701610fe0565b610709610fe0565b600054604051638bedf3bb60e01b81526001600160a01b0390911690638bedf3bb9061073d90889088908890600401611291565b604080518083038186803b15801561075457600080fd5b505afa158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c91906111f1565b9695505050505050565b61079e610fe0565b60008060009054906101000a90046001600160a01b03166001600160a01b031663b79023036040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ed57600080fd5b505afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108259190611148565b90506060816001600160a01b031663b7538c626040518163ffffffff1660e01b815260040160006040518083038186803b15801561086257600080fd5b505afa158015610876573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261089e9190810190611023565b905060005b815181101561099457856001600160a01b03168282815181106108c257fe5b60200260200101516001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561090257600080fd5b505afa158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a9190611148565b6001600160a01b03161461094d5761098c565b610955610fe0565b61097283838151811061096457fe5b602002602001015187610148565b602001519050610988858263ffffffff610d3516565b9450505b6001016108a3565b50505092915050565b6109a5610fe0565b60005460405163ea0a45f960e01b81526001600160a01b039091169063ea0a45f9906109d79086908690600401611277565b60206040518083038186803b1580156109ef57600080fd5b505afa158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190611225565b9392505050565b610a36610fe0565b8251610a4190610b29565b15610a8857610a83600019610a778560000151610a6b876060015187610cd090919063ffffffff16565b9063ffffffff610d5816565b9063ffffffff610d7b16565b610a27565b610a27610b2d565b610a98610fe0565b8180600001516001600160ff1b03101560405180606001604052806033815260200161153f6033913990610ae85760405162461bcd60e51b8152600401610adf91906112c1565b60405180910390fd5b50506040805160208101909152915182525090565b610b05610fe0565b610b0d610fe0565b82518451610b209163ffffffff610d9d16565b81529392505050565b5190565b610b35610fe0565b5060408051602081019091526000815290565b610b50610fe0565b610b58610fe0565b825160001315610b6e57825160000381526105a2565b915182525090565b610b7e610fe0565b8180600001516001600160ff1b03101560405180606001604052806033815260200161153f6033913990610bc55760405162461bcd60e51b8152600401610adf91906112c1565b50610bce610fe0565b83518551610be19163ffffffff610d9d16565b8152949350505050565b610bf3610fe0565b8180600001516001600160ff1b03101560405180606001604052806033815260200161153f6033913990610c3a5760405162461bcd60e51b8152600401610adf91906112c1565b50610c43610fe0565b83518551610be19163ffffffff610de316565b610c5e610fe0565b8180600001516001600160ff1b03101560405180606001604052806033815260200161153f6033913990610ca55760405162461bcd60e51b8152600401610adf91906112c1565b50610cae610fe0565b610cc7610cba85610a90565b869063ffffffff610d5816565b95945050505050565b610cd8610fe0565b610ce0610fe0565b82518451610b209163ffffffff610de316565b6000610a2783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610e29565b610d3d610fe0565b610d45610fe0565b82518451610b209163ffffffff610e5516565b610d60610fe0565b610d68610fe0565b82518451610b209163ffffffff610e7a16565b610d83610fe0565b610d8b610fe0565b8351610b20908463ffffffff610e8816565b6000828201818312801590610db25750838112155b80610dc75750600083128015610dc757508381125b610a275760405162461bcd60e51b8152600401610adf9061134b565b6000818303818312801590610df85750838113155b80610e0d5750600083128015610e0d57508381135b610a275760405162461bcd60e51b8152600401610adf90611414565b60008184841115610e4d5760405162461bcd60e51b8152600401610adf91906112c1565b505050900390565b600082820183811015610a275760405162461bcd60e51b8152600401610adf90611314565b6000610a2783836012610ef3565b600082610e97575060006105a2565b82600019148015610eab5750600160ff1b82145b15610ec85760405162461bcd60e51b8152600401610adf906113cd565b82820282848281610ed557fe5b0514610a275760405162461bcd60e51b8152600401610adf906113cd565b6000610f1d610f0183610f25565b610f11868663ffffffff610e8816565b9063ffffffff610f2e16565b949350505050565b60ff16600a0a90565b600081610f4d5760405162461bcd60e51b8152600401610adf90611458565b81600019148015610f615750600160ff1b83145b15610f7e5760405162461bcd60e51b8152600401610adf9061138c565b6000828481610f8957fe5b05949350505050565b6040518060c00160405280610fa5610fe0565b8152602001610fb2610fe0565b8152602001610fbf610fe0565b8152602001610fcc610fe0565b815260200160008152602001600081525090565b6040518060200160405280600081525090565b80516105a281611526565b60006020828403121561100f578081fd5b61101960206114df565b9151825250919050565b60006020808385031215611035578182fd5b825167ffffffffffffffff81111561104b578283fd5b80840185601f82011261105c578384fd5b8051915061107161106c83611506565b6114df565b828152838101908285018585028401860189101561108d578687fd5b8693505b848410156110b7576110a38982610ff3565b835260019390930192918501918501611091565b50979650505050505050565b600080604083850312156110d5578081fd5b82356110e081611526565b915060208301356110f081611526565b809150509250929050565b60008060006060848603121561110f578081fd5b833561111a81611526565b9250602084013561112a81611526565b915060408401356003811061113d578182fd5b809150509250925092565b600060208284031215611159578081fd5b8151610a2781611526565b600080604083850312156110d5578182fd5b600060c08284031215611187578081fd5b61119160c06114df565b61119b8484610ffe565b81526111aa8460208501610ffe565b60208201526111bc8460408501610ffe565b60408201526111ce8460608501610ffe565b60608201526080830151608082015260a083015160a08201528091505092915050565b60008060408385031215611203578182fd5b61120d8484610ffe565b915061121c8460208501610ffe565b90509250929050565b600060208284031215611236578081fd5b610a278383610ffe565b600060208284031215611251578081fd5b5051919050565b901515815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0384811682528316602082015260608101600383106112b357fe5b826040830152949350505050565b6000602080835283518082850152825b818110156112ed578581018301518582016040015282016112d1565b818111156112fe5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526021908201527f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526027908201527f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f604082015266766572666c6f7760c81b606082015260800190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b6020808252818101527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604082015260600190565b600060c08201905082515182526020830151516020830152604083015151604083015260608301515160608301526080830151608083015260a083015160a083015292915050565b9051815260200190565b60405181810167ffffffffffffffff811182821017156114fe57600080fd5b604052919050565b600067ffffffffffffffff82111561151c578081fd5b5060209081020190565b6001600160a01b038116811461153b57600080fd5b5056fe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a264697066735822122003e4449743c682d0c16053064c9e32525a6d2402982b1f21b0aa985739c58cf864736f6c63430006090033";

export class ClearingHouseViewer__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _clearingHouse: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ClearingHouseViewer> {
    return super.deploy(
      _clearingHouse,
      overrides || {}
    ) as Promise<ClearingHouseViewer>;
  }
  getDeployTransaction(
    _clearingHouse: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_clearingHouse, overrides || {});
  }
  attach(address: string): ClearingHouseViewer {
    return super.attach(address) as ClearingHouseViewer;
  }
  connect(signer: Signer): ClearingHouseViewer__factory {
    return super.connect(signer) as ClearingHouseViewer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClearingHouseViewerInterface {
    return new utils.Interface(_abi) as ClearingHouseViewerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClearingHouseViewer {
    return new Contract(address, _abi, signerOrProvider) as ClearingHouseViewer;
  }
}
