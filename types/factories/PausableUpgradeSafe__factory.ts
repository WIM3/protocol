/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PausableUpgradeSafe,
  PausableUpgradeSafeInterface,
} from "../PausableUpgradeSafe";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060868061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635c975abb14602d575b600080fd5b60336047565b604080519115158252519081900360200190f35b60655460ff169056fea2646970667358221220b046bafe6115034dd6021942d46e5a8fff694bb596d9ba856e37ea2250ecb74364736f6c63430006090033";

export class PausableUpgradeSafe__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PausableUpgradeSafe> {
    return super.deploy(overrides || {}) as Promise<PausableUpgradeSafe>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PausableUpgradeSafe {
    return super.attach(address) as PausableUpgradeSafe;
  }
  connect(signer: Signer): PausableUpgradeSafe__factory {
    return super.connect(signer) as PausableUpgradeSafe__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PausableUpgradeSafeInterface {
    return new utils.Interface(_abi) as PausableUpgradeSafeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PausableUpgradeSafe {
    return new Contract(address, _abi, signerOrProvider) as PausableUpgradeSafe;
  }
}
