{
  "address": "0x74098E479195A322A626feEf5ba36E6f66B7ebF2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whitelister",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_priceFeedKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_beaconId",
          "type": "bytes32"
        }
      ],
      "name": "BeaconWhitelisted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_priceFeedKey",
          "type": "bytes32"
        }
      ],
      "name": "getBeacon",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_priceFeedKey",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_priceFeedKey",
          "type": "bytes32"
        }
      ],
      "name": "isPriceFeedWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "priceFeedMap",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "priceFeedWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_priceFeedKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_beaconId",
          "type": "bytes32"
        }
      ],
      "name": "setBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b75bee3d8df734275a0bb0cfbf442eef95db6ef647934f3a3e5e641fc9feb1b",
  "receipt": {
    "to": null,
    "from": "0xED228D934a1B4c1bA7Ef46a358944F9dAA39ebb1",
    "contractAddress": "0x74098E479195A322A626feEf5ba36E6f66B7ebF2",
    "transactionIndex": 18,
    "gasUsed": "437786",
    "logsBloom": "0x
    "blockHash": "0x686d99223e875189c82e82d65f68ac69d346c9cb79dd43cafd14fd033794d533",
    "transactionHash": "0x0b75bee3d8df734275a0bb0cfbf442eef95db6ef647934f3a3e5e641fc9feb1b",
    "logs": [],
    "blockNumber": 6903829,
    "cumulativeGasUsed": "4480968",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x04De82532FeE662877fdf7357Ef92D95B6bc1DfE"
  ],
  "solcInputHash": "68941f0006a81db231fcc9572697f8ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelister\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_priceFeedKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_beaconId\",\"type\":\"bytes32\"}],\"name\":\"BeaconWhitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_priceFeedKey\",\"type\":\"bytes32\"}],\"name\":\"getBeacon\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_priceFeedKey\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_priceFeedKey\",\"type\":\"bytes32\"}],\"name\":\"isPriceFeedWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"priceFeedMap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"priceFeedWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_priceFeedKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_beaconId\",\"type\":\"bytes32\"}],\"name\":\"setBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBeacon(bytes32)\":{\"details\":\"returns beacon id\"},\"getPrice(bytes32)\":{\"details\":\"returns log(price) of an asset\",\"params\":{\"_priceFeedKey\":\"price feed identifier/symbol of asset i.e ETH/USD\"}},\"isPriceFeedWhitelisted(bytes32)\":{\"details\":\"returns bool to indicate if price feed key is whitelisted or not\"},\"setBeacon(bytes32,bytes32)\":{\"details\":\"sets _beaconId to _priceFeedKey\",\"params\":{\"_beaconId\":\"beacon id\",\"_priceFeedKey\":\"price feed identifier/symbol of asset i.e ETH/USD\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"priceFeedMap(bytes32)\":{\"notice\":\"mapping of price feed key -> beacon id\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/API3PriceFeed.sol\":\"API3PriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/API3/IRrpBeaconServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <=0.9.0;\\n\\ninterface IRrpBeaconServer {\\n    event ExtendedWhitelistExpiration(\\n        bytes32 indexed beaconId,\\n        address indexed reader,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetWhitelistExpiration(\\n        bytes32 indexed beaconId,\\n        address indexed reader,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetIndefiniteWhitelistStatus(\\n        bytes32 indexed beaconId,\\n        address indexed reader,\\n        address indexed sender,\\n        bool status,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    event RevokedIndefiniteWhitelistStatus(\\n        bytes32 indexed beaconId,\\n        address indexed reader,\\n        address indexed setter,\\n        address sender,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    event SetUpdatePermissionStatus(\\n        address indexed sponsor,\\n        address indexed updateRequester,\\n        bool status\\n    );\\n\\n    event RequestedBeaconUpdate(\\n        bytes32 indexed beaconId,\\n        address indexed sponsor,\\n        address indexed requester,\\n        bytes32 requestId,\\n        bytes32 templateId,\\n        address sponsorWallet,\\n        bytes parameters\\n    );\\n\\n    event UpdatedBeacon(\\n        bytes32 indexed beaconId,\\n        bytes32 requestId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    function extendWhitelistExpiration(\\n        bytes32 beaconId,\\n        address reader,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setWhitelistExpiration(\\n        bytes32 beaconId,\\n        address reader,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setIndefiniteWhitelistStatus(\\n        bytes32 beaconId,\\n        address reader,\\n        bool status\\n    ) external;\\n\\n    function revokeIndefiniteWhitelistStatus(\\n        bytes32 beaconId,\\n        address reader,\\n        address setter\\n    ) external;\\n\\n    function setUpdatePermissionStatus(address updateRequester, bool status) external;\\n\\n    function requestBeaconUpdate(\\n        bytes32 beaconId,\\n        address requester,\\n        address designatedWallet,\\n        bytes calldata parameters\\n    ) external;\\n\\n    function fulfill(bytes32 requestId, bytes calldata data) external;\\n\\n    function readBeacon(bytes32 beaconId) external view returns (int224 value, uint32 timestamp);\\n\\n    function readerCanReadBeacon(bytes32 beaconId, address reader) external view returns (bool);\\n\\n    function beaconIdToReaderToWhitelistStatus(bytes32 beaconId, address reader)\\n        external\\n        view\\n        returns (uint64 expirationTimestamp, uint192 indefiniteWhitelistCount);\\n\\n    function beaconIdToReaderToSetterToIndefiniteWhitelistStatus(\\n        bytes32 beaconId,\\n        address reader,\\n        address setter\\n    ) external view returns (bool indefiniteWhitelistStatus);\\n\\n    function sponsorToUpdateRequesterToPermissionStatus(address sponsor, address updateRequester)\\n        external\\n        view\\n        returns (bool permissionStatus);\\n\\n    function deriveBeaconId(bytes32 templateId, bytes calldata parameters)\\n        external\\n        pure\\n        returns (bytes32 beaconId);\\n}\\n\",\"keccak256\":\"0x9169e1860abb8635cb29724edb02501f42411e626c9b021540ef2814f3bc2974\",\"license\":\"MIT\"},\"contracts/API3/ISelfServeRrpBeaconServerWhitelister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <=0.9.0;\\n\\ninterface ISelfServeRrpBeaconServerWhitelister {\\n    event SetBeaconIdToExpirationTimestamp(bytes32 indexed beaconId, uint64 expirationTimestamp);\\n    event SetBeaconIdToIndefiniteWhitelistStatus(\\n        bytes32 indexed beaconId,\\n        bool indefiniteWhitelistStatus\\n    );\\n    event WhitelistedReader(\\n        bytes32 indexed beaconId,\\n        address indexed reader,\\n        uint64 expirationTimestamp,\\n        bool indefiniteWhitelistStatus\\n    );\\n\\n    function setBeaconIdToExpirationTimestamp(bytes32 _beaconId, uint64 _expirationTimestamp)\\n        external;\\n\\n    function setBeaconIdToIndefiniteWhitelistStatus(\\n        bytes32 _beaconId,\\n        bool _indefiniteWhitelistStatus\\n    ) external;\\n\\n    function whitelistReader(bytes32 _beaconId, address _reader) external;\\n\\n    function beaconIdToExpirationTimestamp(bytes32 _beaconId) external view returns (uint64);\\n\\n    function beaconIdToIndefiniteWhitelistStatus(bytes32 _beaconId) external view returns (bool);\\n\\n    function rrpBeaconServer() external view returns (address);\\n}\\n\",\"keccak256\":\"0x34bee522b155667707fdb759f83c461044df9ff8e77d55616fd996221e13c85d\",\"license\":\"MIT\"},\"contracts/API3PriceFeed.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"./API3/IRrpBeaconServer.sol\\\";\\nimport \\\"./API3/ISelfServeRrpBeaconServerWhitelister.sol\\\";\\nimport \\\"./interface/IPriceFeed.sol\\\";\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\ncontract API3PriceFeed is IPriceFeed {\\n    using PRBMathUD60x18 for uint256;\\n\\n    /// @notice mapping of price feed key -> beacon id\\n    mapping(bytes32 => bytes32) public priceFeedMap;\\n\\n    mapping(bytes32 => bool) public priceFeedWhitelisted;\\n\\n    uint256 SCALE = 10**12;\\n\\n    IRrpBeaconServer RrpBeaconServer;\\n    ISelfServeRrpBeaconServerWhitelister ssR;\\n\\n    event BeaconWhitelisted(bytes32 _priceFeedKey, bytes32 _beaconId);\\n\\n    constructor(address _whitelister) {\\n        requireNonEmptyAddress(_whitelister);\\n        ssR = ISelfServeRrpBeaconServerWhitelister(_whitelister);\\n        RrpBeaconServer = IRrpBeaconServer(ssR.rrpBeaconServer());\\n    }\\n\\n    /// @dev returns log(price) of an asset\\n    /// @param _priceFeedKey price feed identifier/symbol of asset i.e ETH/USD\\n    function getPrice(bytes32 _priceFeedKey) external view override returns (uint256) {\\n        require(priceFeedWhitelisted[_priceFeedKey], \\\"PRICE_FEED: NOT WHITELISTED\\\");\\n\\n        bytes32 beaconId = priceFeedMap[_priceFeedKey];\\n        (int224 value, ) = RrpBeaconServer.readBeacon(beaconId);\\n        uint256 scaledVal;\\n        unchecked {\\n            scaledVal = uint256(int256(value)) * SCALE;\\n        }\\n        return scaledVal.log2();\\n    }\\n\\n    // function getTwapPrice(\\n    //     bytes32 _priceFeedKey,\\n    //     uint256 _intervals\\n    // ) external view returns(uint256){}\\n\\n    // function getPreviousPrice(\\n    //     bytes32 _priceFeedKey,\\n    //     uint256 at\\n    // ) external view returns(uint256){}\\n\\n    /// @dev sets _beaconId to _priceFeedKey\\n    /// @param _priceFeedKey price feed identifier/symbol of asset i.e ETH/USD\\n    /// @param _beaconId beacon id\\n    function setBeacon(bytes32 _priceFeedKey, bytes32 _beaconId) external {\\n        require(_beaconId != bytes32(0));\\n\\n        if (!isPriceFeedWhitelisted(_priceFeedKey)) {\\n            ssR.whitelistReader(_beaconId, address(this));\\n            priceFeedWhitelisted[_priceFeedKey] = true;\\n        }\\n        priceFeedMap[_priceFeedKey] = _beaconId;\\n\\n        emit BeaconWhitelisted(_priceFeedKey, _beaconId);\\n    }\\n\\n    /// @dev returns bool to indicate if price feed key is whitelisted or not\\n    function isPriceFeedWhitelisted(bytes32 _priceFeedKey) public view returns (bool) {\\n        return priceFeedWhitelisted[_priceFeedKey];\\n    }\\n\\n    /// @dev returns beacon id\\n    function getBeacon(bytes32 _priceFeedKey) public view returns (bytes32) {\\n        return priceFeedMap[_priceFeedKey];\\n    }\\n\\n    function requireNonEmptyAddress(address _addr) internal pure {\\n        require(_addr != address(0), \\\"empty address\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe478cf2da163a151303fae27a5452a61052bb309453988c3eabe29fe3fa31f97\",\"license\":\"Unlicense\"},\"contracts/interface/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IPriceFeed {\\n    // get latest price\\n    function getPrice(bytes32 _priceFeedKey) external view returns (uint256);\\n\\n    // get previous price with _back rounds\\n    // function getPreviousPrice(bytes32 _priceFeedKey, uint256 _numOfRoundBack) external view returns (uint256);\\n\\n    // get twap price depending on _period\\n    // function getTwapPrice(bytes32 _priceFeedKey, uint256 _interval) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31de4939f3a9f04c5adb694ddd18621b3240693c77c45e706d495718d91ad960\",\"license\":\"GPL-3.0-or-later\"},\"prb-math/contracts/PRBMathCommon.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.0;\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n// representation. When it does not, it is annonated in the function's NatSpec documentation.\\nlibrary PRBMathCommon {\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Uses 128.128-bit fixed-point numbers - it is the most efficient way.\\n    /// @param x The exponent as an unsigned 128.128-bit fixed-point number.\\n    /// @return result The result as an unsigned 60x18 decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 128.128-bit fixed-point format. We need to use uint256 because the intermediary\\n            // may get very close to 2^256, which doesn't fit in int256.\\n            result = 0x80000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^127 and all magic factors are less than 2^129.\\n            if (x & 0x80000000000000000000000000000000 > 0) result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            if (x & 0x40000000000000000000000000000000 > 0) result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDED) >> 128;\\n            if (x & 0x20000000000000000000000000000000 > 0) result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A7920) >> 128;\\n            if (x & 0x10000000000000000000000000000000 > 0) result = (result * 0x10B5586CF9890F6298B92B71842A98364) >> 128;\\n            if (x & 0x8000000000000000000000000000000 > 0) result = (result * 0x1059B0D31585743AE7C548EB68CA417FE) >> 128;\\n            if (x & 0x4000000000000000000000000000000 > 0) result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE9) >> 128;\\n            if (x & 0x2000000000000000000000000000000 > 0) result = (result * 0x10163DA9FB33356D84A66AE336DCDFA40) >> 128;\\n            if (x & 0x1000000000000000000000000000000 > 0) result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9544) >> 128;\\n            if (x & 0x800000000000000000000000000000 > 0) result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679C) >> 128;\\n            if (x & 0x400000000000000000000000000000 > 0) result = (result * 0x1002C605E2E8CEC506D21BFC89A23A011) >> 128;\\n            if (x & 0x200000000000000000000000000000 > 0) result = (result * 0x100162F3904051FA128BCA9C55C31E5E0) >> 128;\\n            if (x & 0x100000000000000000000000000000 > 0) result = (result * 0x1000B175EFFDC76BA38E31671CA939726) >> 128;\\n            if (x & 0x80000000000000000000000000000 > 0) result = (result * 0x100058BA01FB9F96D6CACD4B180917C3E) >> 128;\\n            if (x & 0x40000000000000000000000000000 > 0) result = (result * 0x10002C5CC37DA9491D0985C348C68E7B4) >> 128;\\n            if (x & 0x20000000000000000000000000000 > 0) result = (result * 0x1000162E525EE054754457D5995292027) >> 128;\\n            if (x & 0x10000000000000000000000000000 > 0) result = (result * 0x10000B17255775C040618BF4A4ADE83FD) >> 128;\\n            if (x & 0x8000000000000000000000000000 > 0) result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAC) >> 128;\\n            if (x & 0x4000000000000000000000000000 > 0) result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7CA) >> 128;\\n            if (x & 0x2000000000000000000000000000 > 0) result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            if (x & 0x1000000000000000000000000000 > 0) result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            if (x & 0x800000000000000000000000000 > 0) result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1629) >> 128;\\n            if (x & 0x400000000000000000000000000 > 0) result = (result * 0x1000002C5C863B73F016468F6BAC5CA2C) >> 128;\\n            if (x & 0x200000000000000000000000000 > 0) result = (result * 0x100000162E430E5A18F6119E3C02282A6) >> 128;\\n            if (x & 0x100000000000000000000000000 > 0) result = (result * 0x1000000B1721835514B86E6D96EFD1BFF) >> 128;\\n            if (x & 0x80000000000000000000000000 > 0) result = (result * 0x100000058B90C0B48C6BE5DF846C5B2F0) >> 128;\\n            if (x & 0x40000000000000000000000000 > 0) result = (result * 0x10000002C5C8601CC6B9E94213C72737B) >> 128;\\n            if (x & 0x20000000000000000000000000 > 0) result = (result * 0x1000000162E42FFF037DF38AA2B219F07) >> 128;\\n            if (x & 0x10000000000000000000000000 > 0) result = (result * 0x10000000B17217FBA9C739AA5819F44FA) >> 128;\\n            if (x & 0x8000000000000000000000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC824) >> 128;\\n            if (x & 0x4000000000000000000000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE51) >> 128;\\n            if (x & 0x2000000000000000000000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFD0) >> 128;\\n            if (x & 0x1000000000000000000000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            if (x & 0x800000000000000000000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AE) >> 128;\\n            if (x & 0x400000000000000000000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CD) >> 128;\\n            if (x & 0x200000000000000000000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            if (x & 0x100000000000000000000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AF) >> 128;\\n            if (x & 0x80000000000000000000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCF) >> 128;\\n            if (x & 0x40000000000000000000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0E) >> 128;\\n            if (x & 0x20000000000000000000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            if (x & 0x10000000000000000000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94D) >> 128;\\n            if (x & 0x8000000000000000000000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33E) >> 128;\\n            if (x & 0x4000000000000000000000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26946) >> 128;\\n            if (x & 0x2000000000000000000000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388D) >> 128;\\n            if (x & 0x1000000000000000000000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D41) >> 128;\\n            if (x & 0x800000000000000000000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDF) >> 128;\\n            if (x & 0x400000000000000000000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77F) >> 128;\\n            if (x & 0x200000000000000000000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C3) >> 128;\\n            if (x & 0x100000000000000000000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E3) >> 128;\\n            if (x & 0x80000000000000000000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F2) >> 128;\\n            if (x & 0x40000000000000000000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA39) >> 128;\\n            if (x & 0x20000000000000000000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            if (x & 0x10000000000000000000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            if (x & 0x8000000000000000000 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            if (x & 0x4000000000000000000 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            if (x & 0x2000000000000000000 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D92) >> 128;\\n            if (x & 0x1000000000000000000 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            if (x & 0x800000000000000000 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE545) >> 128;\\n            if (x & 0x400000000000000000 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            if (x & 0x200000000000000000 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            if (x & 0x100000000000000000 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            if (x & 0x80000000000000000 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6E) >> 128;\\n            if (x & 0x40000000000000000 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B3) >> 128;\\n            if (x & 0x20000000000000000 > 0) result = (result * 0x1000000000000000162E42FEFA39EF359) >> 128;\\n            if (x & 0x10000000000000000 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AC) >> 128;\\n\\n            // Multiply the result by the integer part 2^n + 1. We have to shift by one bit extra because we have already divided\\n            // by two when we set the result equal to 0.5 above.\\n            result = result << ((x >> 128) + 1);\\n\\n            // Convert the result to the signed 60.18-decimal fixed-point format.\\n            result = PRBMathCommon.mulDiv(result, 1e18, 2**128);\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2**256 and mod 2**256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256. Also prevents denominator == 0.\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2**256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2**256. Now that denominator is an odd number, it has an inverse modulo 2**256 such\\n            // that denominator * inv = 1 mod 2**256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2**256. Since the precoditions guarantee that the outcome is\\n            // less than 2**256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMathCommon.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two queations:\\n    ///     1) x * y = type(uint256).max * SCALE\\n    ///     2) (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        require(SCALE > prod1);\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Calculate the square root of the perfect square of a power of two that is the closest to x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x65fe779faaa94967cb5561d21f90ec84c34bb38ed7861316df7aaf74ff2e3d73\",\"license\":\"WTFPL\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.0;\\n\\nimport \\\"./PRBMathCommon.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math. It works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an usigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        require(x <= MAX_WHOLE_UD60x18);\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - y cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMathCommon.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 88722839111672999628.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 128e18.\\n        require(x < 88722839111672999628);\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 128e18 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2**128 doesn't fit within the 128.128-bit format used internally in this function.\\n        require(x < 128e18);\\n\\n        unchecked {\\n            // Convert x to the 128.128-bit fixed-point format.\\n            uint256 x128x128 = (x << 128) / SCALE;\\n\\n            // Pass x to the PRBMathCommon.exp2 function, which uses the 128.128-bit fixed-point number representation.\\n            result = PRBMathCommon.exp2(x128x128);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            require(xy / x == y);\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMathCommon.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding towards zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked { result = (log2(x) * SCALE) / LOG2_E; }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        require(x >= SCALE);\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked { result = (log2(x) * SCALE) / 332192809488736234; }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last digit, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        require(x >= SCALE);\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMathCommon.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMathCommon.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMathCommon.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Retrieves PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3141592653589793238;\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = mul(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = mul(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// Caveats:\\n    /// - The maximum fixed-point number permitted is 115792089237316195423570985008687907853269.984665640564039458.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        require(x < 115792089237316195423570985008687907853269984665640564039458);\\n        unchecked {\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMathCommon.sqrt(x * SCALE);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x10ec61ca1821a0902513ae3487fb135df48075e5ce25767d1f73a75c2a82293c\",\"license\":\"WTFPL\"}},\"version\":1}",
  "bytecode": "0x608060405264e8d4a5100060025534801561001957600080fd5b506040516107083803806107088339810160408190526100389161013d565b610041816100f0565b600480546001600160a01b0319166001600160a01b038316908117825560408051639da4543b60e01b815290519192639da4543b928282019260209290829003018186803b15801561009257600080fd5b505afa1580156100a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ca919061013d565b600380546001600160a01b0319166001600160a01b03929092169190911790555061016b565b6001600160a01b03811661013a5760405162461bcd60e51b815260206004820152600d60248201526c656d707479206164647265737360981b604482015260640160405180910390fd5b50565b60006020828403121561014e578081fd5b81516001600160a01b0381168114610164578182fd5b9392505050565b61058e8061017a6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063250742cc1461006757806331d98b3f1461009a57806344fce375146100ad5780634828da85146100e05780638156bf8a14610100578063dc59936a14610115575b600080fd5b6100876100753660046104b5565b60006020819052908152604090205481565b6040519081526020015b60405180910390f35b6100876100a83660046104b5565b610138565b6100d06100bb3660046104b5565b60016020526000908152604090205460ff1681565b6040519015158152602001610091565b6100876100ee3660046104b5565b60009081526020819052604090205490565b61011361010e3660046104cd565b610244565b005b6100d06101233660046104b5565b60009081526001602052604090205460ff1690565b60008181526001602052604081205460ff1661019a5760405162461bcd60e51b815260206004820152601b60248201527f50524943455f464545443a204e4f542057484954454c49535445440000000000604482015260640160405180910390fd5b600082815260208190526040808220546003549151631de7e45b60e01b8152600481018290529092916001600160a01b031690631de7e45b90602401604080518083038186803b1580156101ed57600080fd5b505afa158015610201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022591906104ee565b50600254909150601b82900b0261023b81610330565b95945050505050565b8061024e57600080fd5b60008281526001602052604090205460ff166102e357600480546040516327b2fec760e11b81529182018390523060248301526001600160a01b031690634f65fd8e90604401600060405180830381600087803b1580156102ae57600080fd5b505af11580156102c2573d6000803e3d6000fd5b5050506000838152600160208190526040909120805460ff19169091179055505b6000828152602081815260409182902083905581518481529081018390527f6aa53e77381fa741f9fb2984aa2c13705e2d12aaa54624ea0fd1dc3247cf613b910160405180910390a15050565b6000670de0b6b3a764000082101561034757600080fd5b600061035c670de0b6b3a764000084046103c9565b670de0b6b3a7640000808202935090915083821c9081141561037f575050919050565b6706f05b59d3b200005b80156103c157670de0b6b3a7640000828002049150671bc16d674ec8000082106103b9579283019260019190911c905b60011c610389565b505050919050565b6000600160801b82106103e957608091821c916103e69082610534565b90505b68010000000000000000821061040c57604091821c916104099082610534565b90505b640100000000821061042b57602091821c916104289082610534565b90505b62010000821061044857601091821c916104459082610534565b90505b610100821061046457600891821c916104619082610534565b90505b6010821061047f57600491821c9161047c9082610534565b90505b6004821061049a57600291821c916104979082610534565b90505b600282106104b0576104ad600182610534565b90505b919050565b6000602082840312156104c6578081fd5b5035919050565b600080604083850312156104df578081fd5b50508035926020909101359150565b60008060408385031215610500578182fd5b825180601b0b8114610510578283fd5b602084015190925063ffffffff81168114610529578182fd5b809150509250929050565b6000821982111561055357634e487b7160e01b81526011600452602481fd5b50019056fea2646970667358221220a9ca0221ad615670843182eee69b93dc136a9a5888509478784ab2298463a1f664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063250742cc1461006757806331d98b3f1461009a57806344fce375146100ad5780634828da85146100e05780638156bf8a14610100578063dc59936a14610115575b600080fd5b6100876100753660046104b5565b60006020819052908152604090205481565b6040519081526020015b60405180910390f35b6100876100a83660046104b5565b610138565b6100d06100bb3660046104b5565b60016020526000908152604090205460ff1681565b6040519015158152602001610091565b6100876100ee3660046104b5565b60009081526020819052604090205490565b61011361010e3660046104cd565b610244565b005b6100d06101233660046104b5565b60009081526001602052604090205460ff1690565b60008181526001602052604081205460ff1661019a5760405162461bcd60e51b815260206004820152601b60248201527f50524943455f464545443a204e4f542057484954454c49535445440000000000604482015260640160405180910390fd5b600082815260208190526040808220546003549151631de7e45b60e01b8152600481018290529092916001600160a01b031690631de7e45b90602401604080518083038186803b1580156101ed57600080fd5b505afa158015610201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022591906104ee565b50600254909150601b82900b0261023b81610330565b95945050505050565b8061024e57600080fd5b60008281526001602052604090205460ff166102e357600480546040516327b2fec760e11b81529182018390523060248301526001600160a01b031690634f65fd8e90604401600060405180830381600087803b1580156102ae57600080fd5b505af11580156102c2573d6000803e3d6000fd5b5050506000838152600160208190526040909120805460ff19169091179055505b6000828152602081815260409182902083905581518481529081018390527f6aa53e77381fa741f9fb2984aa2c13705e2d12aaa54624ea0fd1dc3247cf613b910160405180910390a15050565b6000670de0b6b3a764000082101561034757600080fd5b600061035c670de0b6b3a764000084046103c9565b670de0b6b3a7640000808202935090915083821c9081141561037f575050919050565b6706f05b59d3b200005b80156103c157670de0b6b3a7640000828002049150671bc16d674ec8000082106103b9579283019260019190911c905b60011c610389565b505050919050565b6000600160801b82106103e957608091821c916103e69082610534565b90505b68010000000000000000821061040c57604091821c916104099082610534565b90505b640100000000821061042b57602091821c916104289082610534565b90505b62010000821061044857601091821c916104459082610534565b90505b610100821061046457600891821c916104619082610534565b90505b6010821061047f57600491821c9161047c9082610534565b90505b6004821061049a57600291821c916104979082610534565b90505b600282106104b0576104ad600182610534565b90505b919050565b6000602082840312156104c6578081fd5b5035919050565b600080604083850312156104df578081fd5b50508035926020909101359150565b60008060408385031215610500578182fd5b825180601b0b8114610510578283fd5b602084015190925063ffffffff81168114610529578182fd5b809150509250929050565b6000821982111561055357634e487b7160e01b81526011600452602481fd5b50019056fea2646970667358221220a9ca0221ad615670843182eee69b93dc136a9a5888509478784ab2298463a1f664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBeacon(bytes32)": {
        "details": "returns beacon id"
      },
      "getPrice(bytes32)": {
        "details": "returns log(price) of an asset",
        "params": {
          "_priceFeedKey": "price feed identifier/symbol of asset i.e ETH/USD"
        }
      },
      "isPriceFeedWhitelisted(bytes32)": {
        "details": "returns bool to indicate if price feed key is whitelisted or not"
      },
      "setBeacon(bytes32,bytes32)": {
        "details": "sets _beaconId to _priceFeedKey",
        "params": {
          "_beaconId": "beacon id",
          "_priceFeedKey": "price feed identifier/symbol of asset i.e ETH/USD"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "priceFeedMap(bytes32)": {
        "notice": "mapping of price feed key -> beacon id"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 280,
        "contract": "contracts/API3PriceFeed.sol:API3PriceFeed",
        "label": "priceFeedMap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 284,
        "contract": "contracts/API3PriceFeed.sol:API3PriceFeed",
        "label": "priceFeedWhitelisted",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 289,
        "contract": "contracts/API3PriceFeed.sol:API3PriceFeed",
        "label": "SCALE",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 292,
        "contract": "contracts/API3PriceFeed.sol:API3PriceFeed",
        "label": "RrpBeaconServer",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IRrpBeaconServer)199"
      },
      {
        "astId": 295,
        "contract": "contracts/API3PriceFeed.sol:API3PriceFeed",
        "label": "ssR",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ISelfServeRrpBeaconServerWhitelister)264"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRrpBeaconServer)199": {
        "encoding": "inplace",
        "label": "contract IRrpBeaconServer",
        "numberOfBytes": "20"
      },
      "t_contract(ISelfServeRrpBeaconServerWhitelister)264": {
        "encoding": "inplace",
        "label": "contract ISelfServeRrpBeaconServerWhitelister",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}